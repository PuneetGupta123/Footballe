{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchCount } from \"./counterAPI\";\nimport axios from \"axios\";\nconst initialState = {\n  loading: true,\n  footballers: []\n};\nexport const fetchFootballers = createAsyncThunk(\"counter/fetchFootballers\", async () => {\n  try {\n    const apiUrl = \"http://127.0.0.1:5000/api/v1/footballers/\";\n    var config = {\n      method: \"get\",\n      url: apiUrl,\n      headers: {\n        accept: \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    };\n    const response = await axios(config);\n    const data = await response.data;\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const counterSlice = createSlice({\n  name: \"counter1\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = \"loading\";\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      state.value += action.payload;\n    }).addCase(fetchFootballers.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchFootballers.fulfilled, (state, action) => {\n      state.status = \"idle\";\n      state.loading = false;\n      state.footballers = [];\n      state.footballers.push(action.payload);\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter1.value;\nexport const selectFootballers = state => state.counter1.footballers; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","axios","initialState","loading","footballers","fetchFootballers","apiUrl","config","method","url","headers","accept","response","data","console","log","error","counterSlice","name","reducers","increment","state","value","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","incrementAsync","pending","status","fulfilled","push","actions","selectCount","counter1","selectFootballers","incrementIfOdd","amount","dispatch","getState","currentValue","reducer"],"sources":["/Users/pugupta/Desktop/Footballe/my-app/src/features/counter/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchCount } from \"./counterAPI\";\nimport axios from \"axios\";\n\nconst initialState = {\n  loading: true,\n  footballers: [],\n};\n\nexport const fetchFootballers = createAsyncThunk(\n  \"counter/fetchFootballers\",\n  async () => {\n    try {\n      const apiUrl = \"http://127.0.0.1:5000/api/v1/footballers/\";\n\n      var config = {\n        method: \"get\",\n        url: apiUrl,\n        headers: {\n          accept: \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      };\n\n      const response = await axios(config);\n      const data = await response.data;\n      console.log(data);\n      return data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: \"counter1\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        state.value += action.payload;\n      })\n      .addCase(fetchFootballers.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchFootballers.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        state.loading = false;\n        state.footballers = [];\n        state.footballers.push(action.payload);\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter1.value;\nexport const selectFootballers = (state) => state.counter1.footballers;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}