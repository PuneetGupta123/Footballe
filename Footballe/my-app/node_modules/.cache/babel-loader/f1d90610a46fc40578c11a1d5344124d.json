{"ast":null,"code":"import _asyncToGenerator from\"/Users/pugupta/Desktop/Footballe/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/pugupta/Desktop/Footballe/my-app/node_modules/@babel/runtime/regenerator/index.js\";import{createAsyncThunk,createSlice}from\"@reduxjs/toolkit\";import{fetchCount}from\"./counterAPI\";import axios from\"axios\";var initialState={loading:true,value:0,status:\"idle\",footballers:[]};// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport var incrementAsync=createAsyncThunk(\"counter/fetchCount\",/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchCount(amount);case 2:response=_context.sent;return _context.abrupt(\"return\",response.data);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());export var fetchFootballers=createAsyncThunk(\"counter/fetchFootballers\",/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var apiUrl,config,response,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;apiUrl=\"http://jsonplaceholder.typicode.com/posts\";config={method:\"get\",url:apiUrl,headers:{accept:\"application/json\"}};_context2.next=5;return axios(config);case 5:response=_context2.sent;_context2.next=8;return response.data;case 8:data=_context2.sent;console.log(data);return _context2.abrupt(\"return\",data);case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 16:case\"end\":return _context2.stop();}}},_callee2,null,[[0,13]]);})));export var counterSlice=createSlice({name:\"counter1\",initialState:initialState,// The `reducers` field lets us define reducers and generate associated actions\nreducers:{increment:function increment(state){// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\nstate.value+=1;},decrement:function decrement(state){state.value-=1;},// Use the PayloadAction type to declare the contents of `action.payload`\nincrementByAmount:function incrementByAmount(state,action){state.value+=action.payload;}},// The `extraReducers` field lets the slice handle actions defined elsewhere,\n// including actions generated by createAsyncThunk or in other slices.\nextraReducers:function extraReducers(builder){builder.addCase(incrementAsync.pending,function(state){state.status=\"loading\";}).addCase(incrementAsync.fulfilled,function(state,action){state.status=\"idle\";state.value+=action.payload;}).addCase(fetchFootballers.pending,function(state){state.status=\"loading\";}).addCase(fetchFootballers.fulfilled,function(state,action){state.status=\"idle\";state.loading=false;state.footballers=[];state.footballers.push(action.payload);});}});var _counterSlice$actions=counterSlice.actions,increment=_counterSlice$actions.increment,decrement=_counterSlice$actions.decrement,incrementByAmount=_counterSlice$actions.incrementByAmount;// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport{increment,decrement,incrementByAmount};export var selectCount=function selectCount(state){return state.counter1.value;};export var selectFootballers=function selectFootballers(state){return state.counter1.footballers;};// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport var incrementIfOdd=function incrementIfOdd(amount){return function(dispatch,getState){var currentValue=selectCount(getState());if(currentValue%2===1){dispatch(incrementByAmount(amount));}};};export default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","axios","initialState","loading","value","status","footballers","incrementAsync","amount","response","data","fetchFootballers","apiUrl","config","method","url","headers","accept","console","log","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","push","actions","selectCount","counter1","selectFootballers","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["/Users/pugupta/Desktop/Footballe/my-app/src/features/counter/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchCount } from \"./counterAPI\";\nimport axios from \"axios\";\n\nconst initialState = {\n  loading: true,\n  value: 0,\n  status: \"idle\",\n  footballers: [],\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  \"counter/fetchCount\",\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const fetchFootballers = createAsyncThunk(\n  \"counter/fetchFootballers\",\n  async () => {\n    try {\n      const apiUrl = \"http://jsonplaceholder.typicode.com/posts\";\n\n      var config = {\n        method: \"get\",\n        url: apiUrl,\n        headers: {\n          accept: \"application/json\",\n        },\n      };\n\n      const response = await axios(config);\n      const data = await response.data;\n      console.log(data);\n      return data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: \"counter1\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        state.value += action.payload;\n      })\n      .addCase(fetchFootballers.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchFootballers.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        state.loading = false;\n        state.footballers = [];\n        state.footballers.push(action.payload);\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter1.value;\nexport const selectFootballers = (state) => state.counter1.footballers;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}