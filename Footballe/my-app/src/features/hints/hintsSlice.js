import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

const initialState = {
  requestInProgress: true,
  hint: { hint: "" },
};

export const fetchHints = createAsyncThunk(
  "hints/fetchHints",
  async (number) => {
    try {
      const apiUrl =
        "https://353a-130-248-113-29.ngrok-free.app/api/v1/hints/" + number;
      console.log(apiUrl);
      var config = {
        method: "get",
        url: apiUrl,
        headers: {
          accept: "application/json",
          "Access-Control-Allow-Origin": "*",
        },
      };

      const response = await axios(config);
      const data = await response.data;
      return data;
    } catch (error) {
      console.log(error);
    }
  }
);

export const hintsSlice = createSlice({
  name: "hints",
  initialState,
  reducers: {
    dismissHint(state) {
      state.hint = { hint: "" };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchHints.pending, (state) => {
        state.requestInProgress = true;
      })
      .addCase(fetchHints.fulfilled, (state, action) => {
        state.requestInProgress = false;
        state.hint = {};
        state.hint = action.payload;
      });
  },
});

export const selectHint = (state) => state.hints.hint;
export const selectRequestInProgress = (state) => state.hints.requestInProgress;

export const { dismissHint } = hintsSlice.actions;
export default hintsSlice.reducer;
